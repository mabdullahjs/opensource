synchronous defination : 'a code or line of code which executes line by line is called synchoronus'

for example : 

console.log('hello world 1')
console.log('hello world 2')
console.log('hello world 3')
console.log('hello world 4')


output : 

hello world 1
hello world 2
hello world 3
hello world 4



asynchoronous defination : ' Asynchronous code allows your program to do multiple things at once, like handling tasks that take time to finish (like loading data from the internet) without blocking the rest of your program from running'


for example : 

setTimeout(() => {
  console.log("Inside setTimeout");
}, 2000);

console.log("End");




.Imp Points For Synchoronus  and  Asynchronous :-

1: if your code contains these functions then your code is Asynchronous (// setTimeout
// setInterval
// fetch
// axios
// promises
// async await )



2: javascript cannot work Asynchronously because javasrcript is a single thereaded language




3: API calling can be both synchoronus and asynchoronous 


 .Synchronous API Calling: In synchronous API calling, the program will make the API call and then wait for the response to proceed with further execution. 


For Example :

function fetchData() {
    const url = 'https://jsonplaceholder.typicode.com/posts/1';
    const response = fetch(url);  // Synchronous API call
    const data = response.json(); // This line will wait until the response is received
    return data;  // Return the Promise
}

fetchData().then(data => {
    console.log('Synchronous API Response:', data);
});





. Asynchronous API Calling: In asynchronous API calling, the program initiates the API call but does not wait for the response immediately.

For Example :

async function fetchDataAsync() {
    const url = 'https://jsonplaceholder.typicode.com/posts/1';
    const response = await fetch(url);  // Asynchronous API call using await
    const data = await response.json(); // This line will also wait until the response is received
    return data;  // Return the data directly
}

fetchDataAsync().then(data => {
    console.log('Asynchronous API Response:', data);
});



4:synchoronus code always goes for execution in stack.
5.asynchoronous code always goes for execution in side stack.
6.when the the code present in main stack is fully executed then the side stack code wil be executed.
7.All the execution will be attempted in main stack only.
8.Event Loop : Event Loop is kind of transport which takes the code from side stack to main stack 